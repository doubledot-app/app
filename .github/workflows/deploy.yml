name: Deploy to Server

on:
  push:
    branches:
      - main

env:
  APP_NAME: double

jobs:
  # Step 1: Build the Docker image
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx (for cross-platform builds if needed)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker registry using docker/login-action
      - name: Log in to Docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY_URL }}
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      # Build the Docker image
      - name: Build and tag Docker image
        run: |
          docker build --pull -f docker/Dockerfile -t ${{ secrets.DOCKER_REGISTRY_URL }}/${{ env.APP_NAME }}:latest .

      # Push Docker image to registry
      - name: Push Docker image to registry
        run: |
          docker push ${{ secrets.DOCKER_REGISTRY_URL }}/${{ env.APP_NAME }}:latest

  # Step 2: Deploy the Docker image (depends on the build step)
  deploy:
    runs-on: ubuntu-latest
    needs: build # Deploy only if build succeeds

    steps:
      # SSH into the server, pull the latest image, and deploy using Docker Compose
      - name: SSH and deploy to server
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker login ${{ secrets.DOCKER_REGISTRY_URL }} <<EOF
            -u ${{ secrets.DOCKER_REGISTRY_USERNAME }}
            -p ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
            EOF
            cd double-compose
            docker compose -f docker-compose.${{ env.APP_NAME }}.yml pull
            docker compose -f docker-compose.${{ env.APP_NAME }}.yml up -d --force-recreate

  # Step 3: Cleanup (runs after deploy, regardless of success/failure)
  clear:
    runs-on: ubuntu-latest
    needs: deploy # Clean up after deploy

    steps:
      # SSH into the server and clean up unused images
      - name: Clean up Docker resources
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker system prune -a -f || true
