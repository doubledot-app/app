name: Deploy to Server

on:
  push:
    branches:
      - main

env:
  APP_NAME: app
  IMAGE: ${{ vars.DOCKER_REGISTRY_URL }}/app:latest

jobs:
  # Step 1: Build the Docker image
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx (for cross-platform builds if needed)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker registry using docker/login-action
      - name: Log in to Docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY_URL }}
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      # Build the Docker image
      - name: Build and tag Docker image
        run: |
          docker build -f docker/Dockerfile --pull --cache-from ${{ env.IMAGE }} -t ${{ env.IMAGE }} .

      # Push Docker image to registry
      - name: Push Docker image to registry
        run: |
          docker push ${{ env.IMAGE }}

  # Step 2: Deploy the Docker image (depends on the build step)
  deploy:
    runs-on: self-hosted
    needs: build # Deploy only if build succeeds
    steps:
      # Pull the latest image, and deploy using Docker Compose
      - name: SSH and deploy to server
        run: |
          cd infra
          docker compose -f docker-compose.${{ env.APP_NAME }}.yml pull
          docker compose -f docker-compose.${{ env.APP_NAME }}.yml up -d --force-recreate

  # Step 3: Cleanup (runs after deploy, regardless of success/failure)
  clear:
    runs-on: self-hosted
    needs: deploy # Clean up after deploy
    steps:
      # Clean up unused images
      - name: Clean up Docker resources
        run: |
          docker system prune -a -f || true

          